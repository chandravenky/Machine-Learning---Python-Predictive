## Example 3

import pandas

accident_df = pandas.read_csv(r"C:\Users\vchan\OneDrive\Desktop\INSY 662 - Data mining\Session 7\Accidents.csv")

# Dummifying predictors
accident_df["ALCHL_I"] = accident_df["ALCHL_I"]-1           #Changing it to binary for no reason
accident_df = pandas.get_dummies(accident_df, columns = ['SUR_COND','VEH_INVL'])

# Structure the data
X = accident_df.drop(columns=['MAX_SEV_IR'])
y = accident_df['MAX_SEV_IR']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.33, random_state=5)

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(11), max_iter=1000)

model3 = mlp.fit(X_train, y_train)

y_test_pred = model3.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_test_pred)

# Control the order of the label
confusion_matrix(y_test, y_test_pred, labels=[0,1,2])

# Print the label
print(pandas.DataFrame(confusion_matrix(y_test, y_test_pred, labels=[0,1,2]), index=['true:0', 'true:1','true:2'], columns=['pred:0', 'pred:1','pred:2']))

#Tweaks

#-------------------------------------------------
#-------Varying the number of hidden layers-------
#-------------------------------------------------

#1
from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(11), max_iter=1000)

model3 = mlp.fit(X_train, y_train)

y_test_pred = model3.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_test_pred)

#2
from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(11,11), max_iter=1000)

model3 = mlp.fit(X_train, y_train)

y_test_pred = model3.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_test_pred)

#3
from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(11,11,11), max_iter=1000)

model3 = mlp.fit(X_train, y_train)

y_test_pred = model3.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_test_pred)

#-------------------------------------------------
#-------Varying the size of a hidden layer-------
#-------------------------------------------------

from sklearn.model_selection import cross_val_score
import numpy
for i in range(2,21):
    model4= MLPClassifier(hidden_layer_sizes=(i),max_iter=1000)
    scores= cross_val_score(estimator= model4, X=X, y=y, cv=5)
    print(i, '-', numpy.average(scores))

